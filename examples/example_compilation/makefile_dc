# Description of Mac/Linux/Unix Makefile for example_compilation. 
# NVCC compiles C++ and CUDA code and links all objects into an exectuable.
#
#############################
# build_path := Where to build program and put executable (note: folder must already exist)
# api_path_source := Location of API source folder
# api_path_include := Location of API include folder
# EXEC_FILE := Name of executable 
#
# NVCC := Compiler path, in this case nvcc is in $PATH, set c++ standard to c++11
# CFLAGS_CUDA := treat all source files as *.cu (CUDA) files (i.e. even .cpp files might have device code), Compiler Flags for CUDA (*.cu) Files: optimize most, fast math, add API include folder to include search path, equivalent to --relocatable-device-code=true --compile
# CODE := GPU types for which to build explicitly (I have a NVIDIA GTX 780M and 980) https://developer.nvidia.com/cuda-gpus, creates machine code for code=sm_30 (780) and code=sm_52 (980) and virtual architectures for all other generations which can be compiled JIT - code=compute_30 for generations between (3.0,5.0) and code=compute_50 for generations (5.0 and up) http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#options-for-steering-gpu-code-generation
#
#
# cuda_object_names := CUDA objects required for executable
# cuda_objects := Prepends build path to object names
#
# all := Command 'make' or 'make all' builds executable file $(EXEC_FILE) in location $(build_path)/
#
# ##### Object Dependencies Lists #####
# If one of the files on the right hand side of the : changes, the corresponding object must be recompiled.
# This is a users makefile - it assumes there will be no changes to the GOFish API files, so does not include
# all the non-*.cu (non source file) dependencies except those that the user created (i.e. run.h). If changes 
# to the API .h or .cuh files are expected see Object Dependencies Lists in example_dadi or run 'make clean' 
# before each 'make all'.
# ##### End Object Dependencies Lists #####
#
#
# $(cuda_objects) := Make target all objects
# 	Compile CUDA source code into objects, $< := dependencies from Object Dependencies Lists, $@ := object in $(objects)
#
# $(build_path)/$(EXEC_FILE) := Make target executable EXEC_FILE which depends on all objects
# 	Link CUDA/CPP objects into executable EXEC_FILE, $@ := $(build_path)/$(EXEC_FILE)
#
# .PHONY := Defines 'all' as not a true target (i.e. don't remake executable if can't find a file called 'all')
#############################

build_path = ../bin
api_path_source = ../../3P/_internal
api_path_include = ../../3P
EXEC_FILE = GOFish

NVCC = nvcc -std=c++14 
CFLAGS_CUDA = -x cu -O3 --use_fast_math --expt-relaxed-constexpr -I $(api_path_include)/ -dc
CODE = --generate-code arch=compute_30,code=sm_30 --generate-code arch=compute_52,code=sm_52 --generate-code arch=compute_30,code=compute_30 --generate-code arch=compute_52,code=compute_52

cuda_object_names = main.o run.o 
cuda_objects = $(addprefix $(build_path)/,$(cuda_object_names))

all: $(build_path)/$(EXEC_FILE)

##### OBJECT DEPENDENCIES #####
$(build_path)/main.o: main.cpp run.h
$(build_path)/run.o: run.cu run.h
##### END OBJECT DEPENDENCIES #####

$(cuda_objects):
	$(NVCC) $(CODE) $(CFLAGS_CUDA) $< -o $@

$(build_path)/$(EXEC_FILE): $(cuda_objects)

	$(NVCC) $(CODE) $(cuda_objects)  -o $@

.PHONY: all